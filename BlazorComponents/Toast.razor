@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject IComponentContext Context
@implements IDisposable
@using System.Threading

@if (IsVisible)
{
    <div ref="@container"
         role="alert"
         aria-live="assertive"
         aria-atomic="true"
         class="toast">
        <div class="toast-header">
            @ToastHeader
            @if (IsCloseButtonVisible)
            {
                <button type="button"
                        class="ml-2 mb-1 close"
                        aria-label="Close"
                        onclick="@Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            }
        </div>
        <div class="toast-body">
            @ToastBody
        </div>
    </div>
}

@functions {
    [Parameter] bool IsVisible { get; set; } = true;
    [Parameter] RenderFragment ToastHeader { get; set; }
    [Parameter] RenderFragment ToastBody { get; set; }
    [Parameter] bool IsAutoClose { get; set; } = true;
    [Parameter] bool IsCloseButtonVisible { get; set; } = true;
    [Parameter] int Delay { get; set; } = 3000;
    [Parameter] EventCallback Close { get; set; }
    [Parameter] EventCallback Closed { get; set; }

    ElementRef container;
    bool isShown = false;
    CancellationTokenSource? tokenSource;

    protected override async Task OnAfterRenderAsync()
    {
        if (Context.IsConnected && IsVisible && !isShown)
        {
            await JSRuntime.InvokeAsync<object>("__app.toast.show", container);
            isShown = true;
            if (IsAutoClose && Delay >= 1000)
            {
                tokenSource = new CancellationTokenSource();
                try
                {
                    await Task.Delay(Delay, tokenSource.Token);
                    await InvokeAsync(async () => await Close.InvokeAsync(null));
                }
                catch (OperationCanceledException)
                {

                }

            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Context.IsConnected && !IsVisible && isShown)
        {
            tokenSource?.Cancel();
            tokenSource?.Dispose();
            await JSRuntime.InvokeAsync<object>("__app.toast.close", container, new DotNetObjectRef(this));
            isShown = false;
        }
    }

    [JSInvokable]
    public Task OnClosed()
    {
        return Closed.InvokeAsync(null);
    }

    public void Dispose()
    {
        if (Context.IsConnected)
        {
            tokenSource?.Cancel();
            tokenSource.Dispose();
            _ = JSRuntime.InvokeAsync<object>("__app.toast.dispose", container);
        }
    }
}
