@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div ref="@_element" role="alert" aria-live="assertive" aria-atomic="true" class="toast" data-autohide="false" data-animation="true">
    <div class="toast-header">
        @ToastHeader
        <button type="button" class="ml-2 mb-1 close" aria-label="Close" onclick="@OnClose">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="toast-body">
        @ToastBody
    </div>
</div>

@functions {
    ElementRef _element;
    bool _isInitialized;

    [Parameter] bool IsVisible { get; set; } = true;
    [Parameter] RenderFragment ToastHeader { get; set; }
    [Parameter] RenderFragment ToastBody { get; set; }
    [Parameter] bool IsAutoClose { get; set; } = true;
    [Parameter] int Delay { get; set; } = 3000;
    [Parameter] EventCallback OnClose { get; set; }
    [Parameter] EventCallback OnClosed { get; set; }

    protected override async Task OnAfterRenderAsync()
    {
        if (!_isInitialized)
        {
            if (IsVisible)
            {
                await JSRuntime.InvokeAsync<object>("__app.toast.show", _element, new DotNetObjectRef(this));
            }
            _isInitialized = true;
        }
        else
        {
            if (IsVisible)
            {
                await JSRuntime.InvokeAsync<object>("__app.toast.show", _element, new DotNetObjectRef(this));
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("__app.toast.close", _element, new DotNetObjectRef(this));
            }
        }
    }

    [JSInvokable]
    public Task OnToastShownAsync()
    {
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnToastClosedAsync()
    {
        return OnClosed.InvokeAsync(null);
    }
}
