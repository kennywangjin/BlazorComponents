@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject IComponentContext ComponentContext

<div ref="@container" 
     role="alert" 
     aria-live="assertive" 
     aria-atomic="true" 
     class="toast" 
     data-autohide="false" 
     data-animation="true">
    <div class="toast-header">
        @ToastHeader
        <button type="button" 
                class="ml-2 mb-1 close" 
                aria-label="Close" 
                onclick="@Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="toast-body">
        @ToastBody
    </div>
</div>

@functions {
    ElementRef container;

    [Parameter] bool IsVisible { get; set; } = true;
    [Parameter] RenderFragment ToastHeader { get; set; }
    [Parameter] RenderFragment ToastBody { get; set; }
    [Parameter] bool IsAutoClose { get; set; } = true;
    [Parameter] int Delay { get; set; } = 3000;
    [Parameter] EventCallback Close { get; set; }
    [Parameter] EventCallback Closed { get; set; }

    protected override Task OnAfterRenderAsync()
    {
        if(ComponentContext.IsConnected)
        {
            if (IsVisible)
            {
                return JSRuntime.InvokeAsync<object>("__app.toast.show", container, new DotNetObjectRef(this));
            }
            else
            {
                return JSRuntime.InvokeAsync<object>("__app.toast.close", container, new DotNetObjectRef(this));
            }
        }
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnToastShown()
    {
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnToastClosed()
    {
        return Closed.InvokeAsync(null);
    }
}
