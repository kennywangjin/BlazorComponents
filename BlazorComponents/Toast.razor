@inject IJSRuntime JSRuntime
@inject IComponentContext Context
@implements IDisposable

@if (IsVisible)
{
    <div @ref="element"
         role="alert"
         aria-live="assertive"
         aria-atomic="true"
         class="toast">
        <div class="toast-header">
            @ToastHeader
            <button type="button"
                    class="ml-2 mb-1 close"
                    aria-label="Close"
                    @onclick="@OnClose">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body">
            @ToastBody
        </div>
    </div>
}

@code {
    [Parameter] bool IsVisible { get; set; } = true;
    [Parameter] RenderFragment ToastHeader { get; set; }
    [Parameter] RenderFragment ToastBody { get; set; }
    [Parameter] EventCallback OnClose { get; set; }
    [Parameter] EventCallback OnClosed { get; set; }

    ElementRef element;
    bool isOpen = false;

    protected override async Task OnAfterRenderAsync()
    {
        if (Context.IsConnected && IsVisible && !isOpen)
        {
            await JSRuntime.InvokeAsync<bool>("__components.toast.open", element);
            isOpen = true;
        }
    }

    public override async Task SetParametersAsync(ParameterCollection parameters)
    {
        if (Context.IsConnected && isOpen &&
        parameters.TryGetValue(nameof(IsVisible), out bool result) && !result)
        {
            await JSRuntime.InvokeAsync<bool>("__components.toast.close", element);
            isOpen = false;
            await OnClosed.InvokeAsync(null);
        }
        await base.SetParametersAsync(parameters);
    }

    public void Dispose()
    {
        if (Context.IsConnected)
        {
            _ = JSRuntime.InvokeAsync<bool>("__components.toast.dispose", element);
        }
    }
}
