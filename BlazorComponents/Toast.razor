@inject IJSRuntime JSRuntime
@implements IDisposable

@if (IsVisible)
{
    <div @ref="_element" role="alert" aria-live="assertive" aria-atomic="true" class="toast">
        <div class="toast-header">
            @ToastHeader
            <button type="button" class="ml-2 mb-1 close" aria-label="Close" @onclick="@OnClose">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body">
            @ToastBody
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public RenderFragment ToastHeader { get; set; } = default!;
    [Parameter] public RenderFragment ToastBody { get; set; } = default!;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnClosed { get; set; }

    private ElementReference _element;
    private bool isOpen = false;
    private bool _rendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _rendered = true;
        if (!firstRender && IsVisible && !isOpen)
        {
            await JSRuntime.InvokeVoidAsync("__components.toast.open", _element);
            isOpen = true;
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (_rendered && isOpen &&
        parameters.TryGetValue(nameof(IsVisible), out bool result) && !result)
        {
            await JSRuntime.InvokeAsync<bool>("__components.toast.close", _element);
            isOpen = false;
            await OnClosed.InvokeAsync(null);
        }
        await base.SetParametersAsync(parameters);
    }

    public void Dispose()
    {
        if (_rendered)
        {
            _ = JSRuntime.InvokeVoidAsync("__components.toast.dispose", _element);
        }
    }
}
