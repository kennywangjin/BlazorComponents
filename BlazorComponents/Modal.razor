@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject IComponentContext Context
@implements IDisposable

@if (IsVisible)
{
    <div ref="@container"
         class="modal fade"
         tabindex="-1"
         role="dialog">
        <div class="@($"modal-dialog {Size.GetCssClass()}")" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @ModalTitle
                    </h5>
                    <button type="button"
                            class="close"
                            aria-label="Close"
                            onclick="@Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @ModalBody
                </div>
                <div class="modal-footer">
                    @ModalFooter
                    <button class="btn btn-secondary" type="button" onclick="@Close">
                        <i class="fas fa-times mr-2" aria-hidden="true"></i>
                        <span>Close</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@functions {
    [Parameter] bool IsVisible { get; set; } = true;
    [Parameter] ModalSize Size { get; set; } = ModalSize.Default;
    [Parameter] RenderFragment ModalTitle { get; set; }
    [Parameter] RenderFragment ModalBody { get; set; }
    [Parameter] RenderFragment ModalFooter { get; set; }
    [Parameter] EventCallback Close { get; set; }
    [Parameter] EventCallback Closed { get; set; }

    ElementRef container;
    bool isShown = false;

    protected override async Task OnAfterRenderAsync()
    {
        if (Context.IsConnected && IsVisible && !isShown)
        {
            await JSRuntime.InvokeAsync<object>("__app.modal.show", container);
            isShown = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Context.IsConnected && !IsVisible && isShown)
        {
            await JSRuntime.InvokeAsync<object>("__app.modal.close",container, new DotNetObjectRef(this));
            isShown = false;
        }
    }

    [JSInvokable]
    public Task OnModalClosed() => Closed.InvokeAsync(null);

    public void Dispose()
    {
        if (!Context.IsConnected)
        {
            return;
        }
        _ = JSRuntime.InvokeAsync<object>("__app.modal.dispose", container);
    }
}