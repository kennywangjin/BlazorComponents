@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject IComponentContext ComponentContext

<div ref="@container" class="modal fade" tabindex="-1" role="dialog">
    <div class="@($"modal-dialog {Size.GetCssClass()}")" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @ModalTitle
                </h5>
                <button type="button" class="close" aria-label="Close" onclick="@Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @ModalBody
            </div>
            <div class="modal-footer">
                @ModalFooter
                <button class="btn btn-secondary" type="button" onclick="@Close">
                    <i class="fas fa-times mr-2" aria-hidden="true"></i>
                    <span>Close</span>
                </button>
            </div>
        </div>
    </div>
</div>

@functions {
    [Parameter] bool IsVisible { get; set; } = true;
    [Parameter] ModalSize Size { get; set; } = ModalSize.Default;
    [Parameter] RenderFragment ModalTitle { get; set; }
    [Parameter] RenderFragment ModalBody { get; set; }
    [Parameter] RenderFragment ModalFooter { get; set; }
    [Parameter] EventCallback Close { get; set; }
    [Parameter] EventCallback Closed { get; set; }

    ElementRef container;

    protected override Task OnAfterRenderAsync()
    {
        if (ComponentContext.IsConnected)
        {
            if (IsVisible)
            {
                return JSRuntime.InvokeAsync<bool>("__app.modal.show", container, new DotNetObjectRef(this));
            }
            else
            {
                return JSRuntime.InvokeAsync<bool>("__app.modal.close", container, new DotNetObjectRef(this));
            }
        }
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnModalShown() => Task.CompletedTask;

    [JSInvokable]
    public Task OnModalClosed() => Closed.InvokeAsync(null);
}