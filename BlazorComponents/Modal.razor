@inject IJSRuntime JSRuntime
@implements IDisposable

@if (IsVisible)
{
    <div @ref="_element" class="modal fade" tabindex="-1" role="dialog">
        <div class="@DialogCssClass" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @ModalTitle
                    </h5>
                    <button type="button" class="close" aria-label="Close" @onclick="OnClose">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @ModalBody
                </div>
                <div class="modal-footer">
                    @ModalFooter
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public ModalSize Size { get; set; } = ModalSize.Default;
    [Parameter] public RenderFragment ModalTitle { get; set; } = default!;
    [Parameter] public RenderFragment ModalBody { get; set; } = default!;
    [Parameter] public RenderFragment ModalFooter { get; set; } = default!;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnClosed { get; set; }

    private ElementReference _element;
    private bool _isOpen = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible && !_isOpen)
        {
            await JSRuntime.InvokeVoidAsync("__components.modal.open", _element);
            _isOpen = true;
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (_isOpen && parameters.TryGetValue(nameof(IsVisible), out bool result) && !result)
        {
            await JSRuntime.InvokeVoidAsync("__components.modal.close", _element);
            _isOpen = false;
            await OnClosed.InvokeAsync(null);
        }
        await base.SetParametersAsync(parameters);
    }

    string DialogCssClass
        => Size switch
        {
            ModalSize.Small => "modal-dialog modal-sm",
            ModalSize.Large => "modal-dialog modal-lg",
            ModalSize.ExtraLarge => "modal-dialog modal-xl",
            ModalSize.Default => "modal-dialog",
            _ => "modal-dialog",
        };

    public async void Dispose()
    {
        await JSRuntime.InvokeVoidAsync("__components.modal.dispose", _element);
    }
}
