@inject IJSRuntime JSRuntime
@inject IComponentContext ComponentContext
@implements IDisposable

@if (IsVisible)
{
    <div @ref="element" class="modal fade" tabindex="-1" role="dialog">
        <div class="@GetDialogClass()" role="document">
            <div class="modal-content">
                @ChildContent
            </div>
        </div>
    </div>
}

@code {
    [Parameter] bool IsVisible { get; set; } = true;
    [Parameter] ModalSize Size { get; set; } = ModalSize.Default;
    [Parameter] RenderFragment ChildContent { get; set; }
    [Parameter] EventCallback OnClose { get; set; }
    [Parameter] EventCallback OnClosed { get; set; }

    ElementRef element;
    bool isOpen = false;

    protected override async Task OnAfterRenderAsync()
    {
        if (ComponentContext.IsConnected && IsVisible && !isOpen)
        {
            await JSRuntime.InvokeAsync<bool>("__components.modal.open", element);
            isOpen = true;
        }
    }

    public override async Task SetParametersAsync(ParameterCollection parameters)
    {
        if (ComponentContext.IsConnected && isOpen &&
            parameters.TryGetValue(nameof(IsVisible), out bool result) && !result)
        {
            await JSRuntime.InvokeAsync<bool>("__components.modal.close", element);
            isOpen = false;
            await OnClosed.InvokeAsync(null);
        }
        await base.SetParametersAsync(parameters);
    }

    string GetDialogClass()
    {
        string klass = "modal-dialog";
        switch (Size)
        {
            case ModalSize.Small:
                klass += " modal-sm";
                break;
            case ModalSize.Large:
                klass += " modal-lg";
                break;
            case ModalSize.ExtraLarge:
                klass += " modal-xl";
                break;
            case ModalSize.Default:
            default:
                break;
        }
        return klass;
    }

    public void Dispose()
    {
        if (ComponentContext.IsConnected)
        {
            _ = JSRuntime.InvokeAsync<bool>("__components.modal.dispose", element);
        }
    }
}
