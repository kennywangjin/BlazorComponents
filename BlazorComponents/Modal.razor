@inject IJSRuntime JSRuntime
@inject IComponentContext ComponentContext
@implements IDisposable

@if (IsVisible)
{
    <div ref="@_element" class="modal fade" tabindex="-1" role="dialog">
        <div class="@DialogClass" role="document">
            <div class="modal-content">
                @ChildContent
            </div>
        </div>
    </div>
}

@functions {
    [Parameter] bool IsVisible { get; set; } = true;
    [Parameter] ModalSize Size { get; set; } = ModalSize.Default;
    [Parameter] RenderFragment ChildContent { get; set; }
    [Parameter] EventCallback OnClose { get; set; }
    [Parameter] EventCallback OnClosed { get; set; }

    string DialogClass
    {
        get
        {
            string klass = "modal-dialog";
            switch (Size)
            {
                case ModalSize.Small:
                    klass += " modal-sm";
                    break;
                case ModalSize.Large:
                    klass += " modal-lg";
                    break;
                case ModalSize.ExtraLarge:
                    klass += " modal-xl";
                    break;
                case ModalSize.Default:
                default:
                    break;
            }
            return klass;
        }
    }

    ElementRef _element;
    bool _isShown = false;

    protected override async Task OnAfterRenderAsync()
    {
        if (ComponentContext.IsConnected && IsVisible && !_isShown)
        {
            await JSRuntime.InvokeAsync<object>("__app.modal.show", _element);
            _isShown = true;
        }
    }

    public override async Task SetParametersAsync(ParameterCollection parameters)
    {
        if (ComponentContext.IsConnected && _isShown &&
            parameters.TryGetValue(nameof(IsVisible), out bool result) && !result)
        {
            await JSRuntime.InvokeAsync<object>("__app.modal.close", _element, new DotNetObjectRef(this));
            _isShown = false;
        }
        await base.SetParametersAsync(parameters);
    }

    [JSInvokable]
    public Task OnModalClosed() => OnClosed.InvokeAsync(null);

    public void Dispose()
    {
        if (ComponentContext.IsConnected)
        {
            _ = JSRuntime.InvokeAsync<object>("__app.modal.dispose", _element);
        }
    }
}
