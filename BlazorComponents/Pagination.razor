@if (PageCount > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination mb-0">
            <li class="@GetPageItemClass(PageIndex-1)">
                <span class="page-link" aria-label="Previous" onclick="@(()=>OnPaginate.InvokeAsync(PageIndex-1))">
                    <span aria-hidden="true">&laquo;</span>
                </span>
            </li>
            @if (PageCount <= (sideVisible * 2 + 3))
            {
                for (int i = 0; i < PageCount; i++)
                {
                    int page = i;
                    <li class="@GetPageItemClass(page)">
                        <span class="page-link" onclick="@(()=> OnPaginate.InvokeAsync(page))">@(page + 1)</span>
                    </li>
                }
            }
            else if (PageIndex <= (sideVisible + 1))
            {
                for (int i = 0; i <= (sideVisible * 2 + 1); i++)
                {
                    int page = i;
                    <li class="@GetPageItemClass(page)">
                        <span class="page-link" onclick="@(()=> OnPaginate.InvokeAsync(page))">@(page + 1)</span>
                    </li>
                }
                <li class="page-item">
                    <span class="page-link">...</span>
                </li>
                <li class="page-item">
                    <span class="page-link" onclick="@(()=>OnPaginate.InvokeAsync(PageCount-1))">@PageCount</span>
                </li>
            }
            else if (PageIndex >= (PageCount - sideVisible - 2))
            {
                <li class="page-item">
                    <span class="page-link" onclick="@(()=>OnPaginate.InvokeAsync(0))">1</span>
                </li>
                <li class="page-item">
                    <span class="page-link">...</span>
                </li>
                for (int i = PageCount - sideVisible * 2 - 2; i < PageCount; i++)
                {
                    int page = i;
                    <li class="@GetPageItemClass(page)">
                        <span class="page-link" onclick="@(()=> OnPaginate.InvokeAsync(page))">@(page + 1)</span>
                    </li>
                }
            }
            else
            {
                <li class="page-item">
                    <span class="page-link" onclick="@(()=>OnPaginate.InvokeAsync(0))">1</span>
                </li>
                <li class="page-item">
                    <span class="page-link">...</span>
                </li>
                @for (int i = PageIndex - sideVisible; i <= PageIndex + sideVisible; i++)
                {
                    int page = i;
                    <li class="@GetPageItemClass(page)">
                        <span class="page-link" onclick="@(()=> OnPaginate.InvokeAsync(page))">@(page + 1)</span>
                    </li>
                }
                <li class="page-item">
                    <span class="page-link">...</span>
                </li>
                <li class="page-item">
                    <span class="page-link" onclick="@(()=>OnPaginate.InvokeAsync(PageCount-1))">@PageCount</span>
                </li>
            }
            <li class="@GetPageItemClass(PageIndex+1)">
                <span class="page-link" aria-label="Next" onclick="@(()=>OnPaginate.InvokeAsync(PageIndex+1))">
                    <span aria-hidden="true">&raquo;</span>
                </span>
            </li>
        </ul>
    </nav>
}

<style>
    .page-item:not(.active):not(.disabled) {
        cursor: pointer;
    }
</style>

@functions {
    [Parameter] int PageIndex { get; set; }
    [Parameter] int PageCount { get; set; } = 1;
    [Parameter] int Total { get; set; }
    [Parameter] EventCallback<int> OnPaginate { get; set; }

    const int sideVisible = 2;

    string GetPageItemClass(int page)
    {
        string klass = "page-item";
        if (page == PageIndex)
        {
            klass += " active";
        }
        if (page < 0 || page > PageCount - 1)
        {
            klass += " disabled";
        }
        return klass;
    }
}