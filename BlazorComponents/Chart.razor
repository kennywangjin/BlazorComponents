@inject IJSRuntime JSRuntime
@implements IDisposable

<div @ref="_element" @attributes="Attributes"></div>

@code {
    [Parameter] public string RenderScript { get; set; } = "__components.chart.render";
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public object Options { get; set; } = new { };
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> Attributes { get; set; } = new Dictionary<string, object>();

    private ElementReference _element;
    private object? _oldOptions;
    private bool? _oldIsLoading;
    private bool _isRendered = false;

    public async ValueTask RenderAsync(object options)
    {
        if (_isRendered)
        {
            await JSRuntime.InvokeVoidAsync(RenderScript, _element, options);
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        _oldOptions = Options;
        _oldIsLoading = IsLoading;

        await base.SetParametersAsync(parameters);

        if (_isRendered && _oldIsLoading != IsLoading)
        {
            _ = JSRuntime.InvokeAsync<object>("__components.chart.showLoading", _element, IsLoading);
        }
    }

    protected override bool ShouldRender()
    {
        return _oldOptions != Options;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _isRendered = true;
        if (ShouldRender())
        {
            await JSRuntime.InvokeVoidAsync("__components.chart.render", _element, Options);
        }
    }

    public void Dispose()
    {
        if (_isRendered)
        {
            _ = JSRuntime.InvokeVoidAsync("__components.chart.destroy", _element);
        }
    }
}
